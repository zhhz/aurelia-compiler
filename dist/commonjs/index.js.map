{"version":3,"sources":["index.js"],"names":[],"mappings":"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","file":"index.js","sourceRoot":"/source/","sourcesContent":["import {ViewCompiler,CompositionEngine,ViewResources,ViewSlot,ViewEngine, Container} from 'aurelia-framework';\nimport {DefaultLoader} from 'aurelia-loader-default';\nimport {TemplateRegistryEntry} from 'aurelia-loader';\nimport {ContentSelector} from 'aurelia-templating';\n\n/**\n * Compiler service\n *\n * compiles an HTML element with aurelia\n */\nexport class Compiler {\n  static inject() {return [ViewCompiler, CompositionEngine,ViewEngine, ViewResources, Container,DefaultLoader]}\n  constructor(viewCompiler, compositionEngine,viewEngine, resources, container,loader) {\n    this.viewCompiler = viewCompiler;\n    this.viewEngine = viewEngine;\n    this.compositionEngine = compositionEngine;\n    this.resources = resources;\n    this.container = container;\n    this.loader = loader;\n  }\n\n  /**\n   * Loads in a new view for a VM and swaps it with the current view in the viewslot.\n   *\n   * The transormer receives an element and should return a string.\n   */\n  swapView(container,view,transformer){\n\n    let element = container.get(Element);\n    let behavior = element.primaryBehavior;\n\n    //store the original content in a document fragment\n    if(!behavior.originalFragment) {\n      var odata = element.innerHTML;\n      if(transformer) odata = transformer(element,element.innerHTML);\n      behavior.originalFragment = this.createFragment(odata);\n      //var orignalViewFactory = behavior.behavior.originalViewFactory = this.viewCompiler.compile(behavior.originalFragment, resources);\n      //behavior.originalView = orignalViewFactory.create(container,behavior.executionContext);\n    }\n\n    return this.loadTemplate(view).then(entry=>{\n      let template = entry.template;\n\n      var data = \"\";\n      for(var i = 0, l = template.content.children.length; i < l; i++){\n        var child = template.content.children[i];\n        if(child) data += child.outerHTML;\n      }\n\n      if(transformer) data = transformer(element,data);\n\n      //apply the template , clone the nodes as this is a template that is potentially used by many VMs\n      element.innerHTML = data;\n\n      return behavior;\n    });\n  }\n\n  /**\n   * Create a fragment from an HTMLElement or String\n   *\n   * @param element {HTMLElement|String}\n   * @return {DocumentFragment}\n   */\n  createFragment(element){\n    //create a new fragment from the current content to pass to the viewCompiler\n    var fragment = document.createDocumentFragment();\n\n    var c = document.createElement(\"div\");\n    c.innerHTML = (element instanceof HTMLElement)? element.innerHTML : element;\n\n    var currentChild = c.firstChild, nextSibling;\n    while(currentChild){\n      nextSibling = currentChild.nextSibling;\n      switch(currentChild.nodeType){\n        case 1:\n          fragment.appendChild(currentChild);\n          break;\n      }\n      currentChild = nextSibling;\n    }\n\n    return fragment;\n  }\n\n  /**\n   * Create a new View from an element's innerHTML and add swap it with current viewslot contents.\n   *\n   * @param container {Container}     DI container of the VM\n   * @param ctx {executionContext}    the execution context to bind to (will use the behavior's execution context by default)\n   *\n   * @return {BehaviorInstance}   The primary behavior associated with the element\n   */\n  processBehavior(container,ctx){\n    //get current element\n    var element = container.get(Element);\n\n    var behavior = element.primaryBehavior;\n\n    //skip if element doesn't have a behavior\n    if(!behavior) return;\n    //skip if element already has a viewFactory\n    if(behavior.viewFactory) return;\n\n    behavior.isAttached = false;\n\n    //get associated viewslot and resources\n    var viewSlot = container.get(ViewSlot);\n    var resources = container.get(ViewResources);\n\n    //var viewFactory = behavior.behavior.viewFactory;\n\n    //create a new viewFactory for the current element contents\n    var fragment = this.createFragment(element);\n\n    //clear targets in the current template\n    var targets = fragment.querySelectorAll('.au-target');\n    for(var i = 0, l = targets.length; i < l; i++){\n      var target = targets[i];\n      target.classList.remove('au-target');\n    }\n\n    //create a new ViewFactory and add it to the element's behavior\n    var viewFactory = behavior.behavior.viewFactory = this.viewCompiler.compile(fragment, resources);\n\n    //empty the current contents\n    element.innerHTML = \"\";\n\n    //create a view from the template and add it to the viewslot\n    var view = viewFactory.create(container,ctx||behavior.executionContext);\n    viewSlot.add(view);\n    viewSlot.attached();\n\n    //add view to the behavior\n    behavior.view = view;\n\n    //process contentSelectors\n    ContentSelector.applySelectors(\n      {fragment:behavior.originalFragment},\n      view.contentSelectors,\n      (contentSelector, group) => contentSelector.add(group)\n    );\n    behavior.contentView = behavior.originalView;\n\n    return behavior;\n  }\n\n  /**\n   * Compile an element\n   * the element should be available in the main resource registry or\n   * in the registry of the execution context passed as the second parameter.\n   *\n   * @param element {HTMLElement}     element to compile\n   * @param ctx {Object}              execution context\n   * @param viewSlot {ViewSlot}       viewslot to add the view to (if null a new one will be created)\n   * @param templateOrFragment {HTMLTemplateElement|DocumentFragment}\n   *        specify what content to use with the element (if null the element's content will be used)\n   *\n   * @returns {ViewSlot}\n   */\n  compile(element, ctx = null,viewSlot = null,templateOrFragment=null) {\n    element.classList.remove('au-target');\n\n    if(!templateOrFragment){\n      var templateOrFragment = document.createDocumentFragment();\n      var c = document.createElement(\"div\");\n      c.innerHTML = element.innerHTML;\n      templateOrFragment.appendChild(c);\n    }\n    var view = this.viewCompiler.compile(templateOrFragment, this.resources).create(this.container, ctx);\n\n    if(!viewSlot) viewSlot = new ViewSlot(element, true);\n\n    viewSlot.add(view);\n    viewSlot.attached();\n    return viewSlot;\n  }\n\n  //------------------ Composing instructions\n\n  /**\n   * compose an alement with a new instruction\n   *\n   * @param element         an HTMLElement where the instuction will be added to.\n   * @param instruction     the instruction to process\n   * @param ctx             an exectution context\n   * @returns {*}\n   */\n  composeElementInstruction(element,instruction,ctx) {\n    instruction.viewSlot = instruction.viewSlot ||new ViewSlot(element, true,ctx);\n    return this.processInstruction(ctx,instruction);\n  }\n\n  /**\n   * compose an existing behaviour with a new instruction\n   *\n   * @param container       the DI container of the behavior (the instruction will be added to it's element)\n   * @param instruction     the instruction to process\n   * @param ctx             the exectution context\n   * @returns {*}\n   */\n  composeBehaviorInstruction(container,instruction,ctx) {\n\n    //get current element\n    var element = container.get(Element);\n\n    var behavior = element.primaryBehavior;\n\n    element.innerHTML = \"\";\n\n    //skip if element doesn't have a behavior\n    if(!behavior) return;\n    var viewSlot = container.get(ViewSlot);\n\n    instruction.viewSlot = viewSlot;\n    instruction.viewModel = behavior;\n    var context = ctx||container.executionContext;\n    instruction.executionContext = context;\n\n    return this.processInstruction(context,instruction).then(viewFactory=>{\n      behavior.behavior.viewFactory = viewFactory;\n      viewSlot.bind(context)\n    });\n  }\n\n  //------------------ Loading helpers\n\n  /**\n   * Load a moduleId as plain text\n   *\n   * @param url      path to a view file\n   * @returns {String}\n   */\n  loadText(url){\n    return this.loader.loadText(url);\n  }\n\n  /**\n   * Load a moduleId as a view factory\n   *\n   * @param view      path to a view file\n   * @returns {ViewFactory}\n   */\n  loadViewFactory(view){\n    return this.viewEngine.loadViewFactory(view);\n  }\n\n  /**\n   * Load a template and return a view registry entry\n   *\n   * @param urlOrRegistryEntry\n   * @param associatedModuleId\n   * @returns {viewRegistryEntry}\n   */\n  loadTemplate(urlOrRegistryEntry, associatedModuleId){\n    return ensureRegistryEntry(this.loader, urlOrRegistryEntry).then(viewRegistryEntry => {\n      if(viewRegistryEntry.isReady){\n        return viewRegistryEntry.factory;\n      }\n\n      return this.viewEngine.loadTemplateResources(viewRegistryEntry, associatedModuleId).then(resources => {\n        if(viewRegistryEntry.isReady){\n          return viewRegistryEntry.factory;\n        }\n\n        viewRegistryEntry.setResources(resources);\n\n        return viewRegistryEntry;\n      });\n    });\n  }\n\n  /**\n   * Loads in View and View Model resources and returns the registry entry for the VM\n   *\n   * @param moduleId\n   * @returns {Promise} return a registry entry\n   */\n  loadVM(moduleId){\n    var entry = this.loader.moduleRegistry[moduleId];\n    if(!entry){\n      return this.viewEngine.importViewResources([moduleId], [], this.resources).then(resources=>{\n        return this.viewEngine.importViewModelResource(moduleId);\n      });\n    }else{\n      return Promise.resolve(entry);\n    }\n  }\n\n  /**\n   * Process an instruction\n   * @param ctx\n   * @param instruction\n   * @returns {*}\n   */\n  processInstruction(ctx, instruction){\n\n    instruction.container = instruction.container||ctx.container||this.container;\n    instruction.executionContext = instruction.executionContext||ctx||this.executionContext;\n    instruction.viewSlot = instruction.viewSlot||ctx.viewSlot||this.viewSlot;\n    instruction.viewResources = instruction.viewResources||ctx.viewResources||this.viewResources;\n    instruction.currentBehavior = instruction.currentBehavior||ctx.currentBehavior||this.currentBehavior;\n\n    return this.compositionEngine.compose(instruction).then(next => {\n      ctx.currentBehavior = next;\n      ctx.currentViewModel = next ? next.executionContext : null;\n    });\n  }\n\n}\n\nfunction ensureRegistryEntry(loader, urlOrRegistryEntry){\n  if(urlOrRegistryEntry instanceof TemplateRegistryEntry){\n    return Promise.resolve(urlOrRegistryEntry);\n  }\n\n  return loader.loadTemplate(urlOrRegistryEntry);\n}\n"]}